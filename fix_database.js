const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Configuration de base de donn√©es (utilise la m√™me config que l'app)
const dbConfig = {
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'megabonplan',
  password: process.env.DB_PASSWORD || '',
  port: parseInt(process.env.DB_PORT) || 5432,
};

console.log('üîß CORRECTION DE LA BASE DE DONN√âES MEGABONPLAN');
console.log('===============================================');

async function fixDatabase() {
  const pool = new Pool(dbConfig);
  
  try {
    console.log('üì° Connexion √† la base de donn√©es...');
    await pool.connect();
    console.log('‚úÖ Connexion r√©ussie !');
    
    // Lire le script SQL
    const sqlScript = fs.readFileSync(
      path.join(__dirname, 'migrations', 'fix_database_tables.sql'),
      'utf8'
    );
    
    console.log('üìù Ex√©cution du script de correction...');
    
    // Diviser le script en requ√™tes individuelles
    const queries = sqlScript
      .split(';')
      .map(query => query.trim())
      .filter(query => query.length > 0 && !query.startsWith('--'));
    
    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (query) {
        try {
          console.log(`‚ö° Ex√©cution de la requ√™te ${i + 1}/${queries.length}...`);
          const result = await pool.query(query);
          
          if (result.rows && result.rows.length > 0) {
            console.log('üìä R√©sultat:', result.rows);
          }
        } catch (error) {
          // Ignorer les erreurs "table already exists"
          if (!error.message.includes('already exists') && 
              !error.message.includes('d√©j√† existe') &&
              !error.message.includes('column already exists')) {
            console.warn(`‚ö†Ô∏è  Avertissement sur la requ√™te ${i + 1}:`, error.message);
          }
        }
      }
    }
    
    console.log('‚úÖ Script de correction termin√© !');
    
    // V√©rifications finales
    console.log('\nüîç V√âRIFICATIONS FINALES');
    console.log('========================');
    
    const verifications = [
      'SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = \'Likes\'',
      'SELECT COUNT(*) as count FROM information_schema.tables WHERE table_name = \'subscriptions\'',
      'SELECT COUNT(*) as count FROM information_schema.columns WHERE table_name = \'utilisateur\' AND column_name = \'verificationcode\'',
      'SELECT COUNT(*) as users FROM utilisateur',
      'SELECT COUNT(*) as bonplans FROM bonplan',
    ];
    
    for (const verification of verifications) {
      try {
        const result = await pool.query(verification);
        console.log(`‚úÖ ${verification}: ${JSON.stringify(result.rows[0])}`);
      } catch (error) {
        console.log(`‚ùå ${verification}: Erreur - ${error.message}`);
      }
    }
    
    console.log('\nüéâ BASE DE DONN√âES CORRIG√âE AVEC SUCC√àS !');
    console.log('Vous pouvez maintenant red√©marrer votre serveur avec: npm start');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    console.error('üí° Suggestions:');
    console.error('   - V√©rifiez que PostgreSQL est d√©marr√©');
    console.error('   - V√©rifiez vos param√®tres de connexion');
    console.error('   - Cr√©ez la base de donn√©es "megabonplan" si elle n\'existe pas');
  } finally {
    await pool.end();
  }
}

// Ex√©cuter le script
fixDatabase().catch(console.error); 